(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{1055:function(t,e,a){"use strict";a.r(e);var l=a(17),i=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"虚拟dom简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟dom简介"}},[t._v("#")]),t._v(" 虚拟DOM简介")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("HTML文档被抽象成一颗由多种类型的节点构成的DOM树，而每次对DOM节点执行增删改查等操作，往往会触发非常消耗性能的重绘和重排操作。")])]),t._v(" "),a("li",[a("p",[t._v("为了解决这一性能问题，React引入虚拟DOM")])]),t._v(" "),a("li",[a("p",[t._v("虚拟DOM是构建在真实DOM之上的一层抽象，它将DOM元素映射成内存中的JS对象（即通过React.createElement(()得到的React元素），形成一颗JS对象树")])]),t._v(" "),a("li",[a("p",[t._v("在React中，将虚拟DOM转换成真实DOM的过程叫做调和")])]),t._v(" "),a("li",[a("p",[t._v("diff算法是保证调和高效的关键，因为diff算法会找出新旧虚拟DOM之间的差异部分，随后只更新真实DOM中需要变化的节点，而不是将整棵DOM树重新渲染一遍。")])]),t._v(" "),a("li",[a("p",[t._v("开发人员也不用再直接与页面上的真实DOM打交道了。")])])])])}),[],!1,null,null,null);e.default=i.exports}}]);
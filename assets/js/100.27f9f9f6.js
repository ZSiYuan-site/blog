(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{901:function(_,v,t){"use strict";t.r(v);var r=t(17),s=Object(r.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_2-stl初识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-stl初识"}},[_._v("#")]),_._v(" 2 STL初识")]),_._v(" "),t("h3",{attrs:{id:"_2-1-stl的诞生"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-stl的诞生"}},[_._v("#")]),_._v(" 2.1 STL的诞生")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("长久以来，软件界一直希望建立一种可重复利用的东西")])]),_._v(" "),t("li",[t("p",[_._v("C++的"),t("strong",[_._v("面向对象")]),_._v("和"),t("strong",[_._v("泛型编程")]),_._v("思想，目的就是"),t("strong",[_._v("复用性的提升")])])]),_._v(" "),t("li",[t("p",[_._v("大多情况下，数据结构和算法都未能有一套标准,导致被迫从事大量重复工作")])]),_._v(" "),t("li",[t("p",[_._v("为了建立数据结构和算法的一套标准,诞生了"),t("strong",[_._v("STL")])]),_._v(" "),t("p",[_._v("​")])])]),_._v(" "),t("h3",{attrs:{id:"_2-2-stl基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-stl基本概念"}},[_._v("#")]),_._v(" 2.2 STL基本概念")]),_._v(" "),t("ul",[t("li",[_._v("STL(Standard Template Library,"),t("strong",[_._v("标准模板库")]),_._v(")")]),_._v(" "),t("li",[_._v("STL 从广义上分为: "),t("strong",[_._v("容器(container) 算法(algorithm) 迭代器(iterator)")])]),_._v(" "),t("li",[t("strong",[_._v("容器")]),_._v("和"),t("strong",[_._v("算法")]),_._v("之间通过"),t("strong",[_._v("迭代器")]),_._v("进行无缝连接。")]),_._v(" "),t("li",[_._v("STL 几乎所有的代码都采用了模板类或者模板函数")])]),_._v(" "),t("h3",{attrs:{id:"_2-3-stl六大组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-stl六大组件"}},[_._v("#")]),_._v(" 2.3 STL六大组件")]),_._v(" "),t("p",[_._v("STL大体分为六大组件，分别是:"),t("strong",[_._v("容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器")])]),_._v(" "),t("ol",[t("li",[_._v("容器：各种数据结构，如vector、list、deque、set、map等,用来存放数据。")]),_._v(" "),t("li",[_._v("算法：各种常用的算法，如sort、find、copy、for_each等")]),_._v(" "),t("li",[_._v("迭代器：扮演了容器与算法之间的胶合剂。")]),_._v(" "),t("li",[_._v("仿函数：行为类似函数，可作为算法的某种策略。")]),_._v(" "),t("li",[_._v("适配器：一种用来修饰容器或者仿函数或迭代器接口的东西。")]),_._v(" "),t("li",[_._v("空间配置器：负责空间的配置与管理。")])]),_._v(" "),t("h3",{attrs:{id:"_2-4-stl中容器、算法、迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-stl中容器、算法、迭代器"}},[_._v("#")]),_._v(" 2.4  STL中容器、算法、迭代器")]),_._v(" "),t("p",[_._v("**容器：**置物之所也")]),_._v(" "),t("p",[_._v("STL"),t("strong",[_._v("容器")]),_._v("就是将运用"),t("strong",[_._v("最广泛的一些数据结构")]),_._v("实现出来")]),_._v(" "),t("p",[_._v("常用的数据结构：数组, 链表,树, 栈, 队列, 集合, 映射表 等")]),_._v(" "),t("p",[_._v("这些容器分为"),t("strong",[_._v("序列式容器")]),_._v("和"),t("strong",[_._v("关联式容器")]),_._v("两种:")]),_._v(" "),t("p",[_._v("​\t"),t("strong",[_._v("序列式容器")]),_._v(":强调值的排序，序列式容器中的每个元素均有固定的位置。\n"),t("strong",[_._v("关联式容器")]),_._v(":二叉树结构，各元素之间没有严格的物理上的顺序关系")]),_._v(" "),t("p",[_._v("**算法：**问题之解法也")]),_._v(" "),t("p",[_._v("有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法(Algorithms)")]),_._v(" "),t("p",[_._v("算法分为:"),t("strong",[_._v("质变算法")]),_._v("和"),t("strong",[_._v("非质变算法")]),_._v("。")]),_._v(" "),t("p",[_._v("质变算法：是指运算过程中会更改区间内的元素的内容。例如拷贝，替换，删除等等")]),_._v(" "),t("p",[_._v("非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等等")]),_._v(" "),t("p",[_._v("**迭代器：**容器和算法之间粘合剂")]),_._v(" "),t("p",[_._v("提供一种方法，使之能够依序寻访某个容器所含的各个元素，而又无需暴露该容器的内部表示方式。")]),_._v(" "),t("p",[_._v("每个容器都有自己专属的迭代器")]),_._v(" "),t("p",[_._v("迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针")]),_._v(" "),t("p",[_._v("迭代器种类：")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("种类")]),_._v(" "),t("th",[_._v("功能")]),_._v(" "),t("th",[_._v("支持运算")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("输入迭代器")]),_._v(" "),t("td",[_._v("对数据的只读访问")]),_._v(" "),t("td",[_._v("只读，支持++、==、！=")])]),_._v(" "),t("tr",[t("td",[_._v("输出迭代器")]),_._v(" "),t("td",[_._v("对数据的只写访问")]),_._v(" "),t("td",[_._v("只写，支持++")])]),_._v(" "),t("tr",[t("td",[_._v("前向迭代器")]),_._v(" "),t("td",[_._v("读写操作，并能向前推进迭代器")]),_._v(" "),t("td",[_._v("读写，支持++、==、！=")])]),_._v(" "),t("tr",[t("td",[_._v("双向迭代器")]),_._v(" "),t("td",[_._v("读写操作，并能向前和向后操作")]),_._v(" "),t("td",[_._v("读写，支持++、--，")])]),_._v(" "),t("tr",[t("td",[_._v("随机访问迭代器")]),_._v(" "),t("td",[_._v("读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器")]),_._v(" "),t("td",[_._v("读写，支持++、--、[n]、-n、<、<=、>、>=")])])])]),_._v(" "),t("p",[_._v("常用的容器中迭代器种类为双向迭代器，和随机访问迭代器")]),_._v(" "),t("h3",{attrs:{id:"_2-5-容器算法迭代器初识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-容器算法迭代器初识"}},[_._v("#")]),_._v(" 2.5 容器算法迭代器初识")]),_._v(" "),t("p",[_._v("了解STL中容器、算法、迭代器概念之后，我们利用代码感受STL的魅力")]),_._v(" "),t("p",[_._v("STL中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中插入数据、并遍历这个容器")])])}),[],!1,null,null,null);v.default=s.exports}}]);
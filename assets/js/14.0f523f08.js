(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{1177:function(t,s,a){"use strict";a.r(s);var r=a(17),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"二叉树链式存储结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉树链式存储结构"}},[t._v("#")]),t._v(" 二叉树链式存储结构")]),t._v(" "),r("p",[r("img",{attrs:{src:a(766),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"问题的引出"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#问题的引出"}},[t._v("#")]),t._v(" 问题的引出")]),t._v(" "),r("ul",[r("li",[t._v("问：n个结点的二叉树，有多少个空指针？")]),t._v(" "),r("li",[t._v("分析：每个结点均有2个指针域，则n个结点的二叉树共有 2n 个指针域。")]),t._v(" "),r("li",[t._v("除根结点外，二叉树中每一个结点均由一个指针域指向，则n个结点的二叉树使用了n - 1个指针域。")]),t._v(" "),r("li",[t._v("空指针数目 = 2n - (n - 1) = n+1")]),t._v(" "),r("li",[t._v("由此可见，二叉链表空间利用率较低。")])]),t._v(" "),r("h3",{attrs:{id:"利用空指针保存前驱和后继"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#利用空指针保存前驱和后继"}},[t._v("#")]),t._v(" 利用空指针保存前驱和后继")]),t._v(" "),r("ul",[r("li",[t._v("结点的前驱与后继关系：\n"),r("ul",[r("li",[t._v("二叉树中序遍历序列为：B D C E A F H G")]),t._v(" "),r("li",[t._v("则A结点的前驱为E，后继为F。")])])]),t._v(" "),r("li",[t._v("普通二叉树只能找到结点的左、右孩子信息，而结点的前驱和后继只能在遍历过程中获得。")]),t._v(" "),r("li",[t._v("可以利用 n+1 个空指针域保存前驱和后继的信息，从而提高遍历过程的效率。")])]),t._v(" "),r("h3",{attrs:{id:"结点的改造"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结点的改造"}},[t._v("#")]),t._v(" 结点的改造")]),t._v(" "),r("p",[r("img",{attrs:{src:a(767),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"线索二叉树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线索二叉树"}},[t._v("#")]),t._v(" 线索二叉树")]),t._v(" "),r("ul",[r("li",[t._v("指示前驱和后继的指针域称为线索；")]),t._v(" "),r("li",[t._v("对二叉树以某种次序遍历，创建线索的过程称为线索化。")]),t._v(" "),r("li",[t._v("线索化之后的二叉树称为线索二叉树；")]),t._v(" "),r("li",[t._v("分别按中序、前序、后序遍历可得到：")]),t._v(" "),r("li",[t._v("中序线索二叉树、前序线索二叉树、后序线索二叉树。")])]),t._v(" "),r("blockquote",[r("p",[t._v("示例\n"),r("img",{attrs:{src:a(524),alt:""}})])]),t._v(" "),r("blockquote",[r("p",[t._v("新增加一个额外的头结点\n"),r("img",{attrs:{src:a(524),alt:""}})])]),t._v(" "),r("h2",{attrs:{id:"哈夫曼树的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树的定义"}},[t._v("#")]),t._v(" 哈夫曼树的定义")]),t._v(" "),r("p",[r("img",{attrs:{src:a(768),alt:""}})]),t._v(" "),r("blockquote",[r("p",[t._v("示例\n"),r("img",{attrs:{src:a(769),alt:""}})])]),t._v(" "),r("h3",{attrs:{id:"构造哈夫曼树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造哈夫曼树"}},[t._v("#")]),t._v(" 构造哈夫曼树")]),t._v(" "),r("p",[r("img",{attrs:{src:a(770),alt:""}}),t._v(" "),r("img",{attrs:{src:a(771),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编码"}},[t._v("#")]),t._v(" 编码")]),t._v(" "),r("p",[r("img",{attrs:{src:a(772),alt:""}})]),t._v(" "),r("h2",{attrs:{id:"不等长编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#不等长编码"}},[t._v("#")]),t._v(" 不等长编码")]),t._v(" "),r("p",[r("img",{attrs:{src:a(773),alt:""}})])])}),[],!1,null,null,null);s.default=e.exports},524:function(t,s,a){t.exports=a.p+"assets/img/3.bdb1de43.png"},766:function(t,s,a){t.exports=a.p+"assets/img/1.53739117.png"},767:function(t,s,a){t.exports=a.p+"assets/img/2.c09c1d17.png"},768:function(t,s,a){t.exports=a.p+"assets/img/5.2873bb39.png"},769:function(t,s,a){t.exports=a.p+"assets/img/6.c093c05d.png"},770:function(t,s,a){t.exports=a.p+"assets/img/7.e2969de8.png"},771:function(t,s,a){t.exports=a.p+"assets/img/8.a0825648.png"},772:function(t,s,a){t.exports=a.p+"assets/img/9.c623ee66.png"},773:function(t,s,a){t.exports=a.p+"assets/img/10.dbeb8116.png"}}]);
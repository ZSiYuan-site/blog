(window.webpackJsonp=window.webpackJsonp||[]).push([[330],{1186:function(t,a,s){"use strict";s.r(a);var v=s(17),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"软件测试的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#软件测试的分类"}},[t._v("#")]),t._v(" 软件测试的分类")]),t._v(" "),s("h3",{attrs:{id:"按照开发阶段分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照开发阶段分类"}},[t._v("#")]),t._v(" 按照开发阶段分类")]),t._v(" "),s("ul",[s("li",[t._v("1.单元测试\n单元测试又称模块测试，是针对软件设计的最小单位——程序模块进行正确性检验的测试工作。其目的在于检查每个程序单元能否满足详细设计说明中的模块功能、性能、接口和设计约束等要求，发现各模块内部可能存在的各种错误。")]),t._v(" "),s("li",[t._v("2.集成测试\n集成测试也叫作组装测试，通常是在单元测试的基础上，将所有的程序模块进行有序的、递增的测试。集成测试检验程序单元或部件的接口关系，使它们逐步集成为符合概要设计要求的程序部件或整个系统。")]),t._v(" "),s("li",[t._v("3.确认测试\n确认测试是通过检查和提供客观证据，证实软件是否满足特定预期用途的需求。确认测试检测与证实软件是否满足软件需求说明书中提出的要求。")]),t._v(" "),s("li",[t._v("4.系统测试\n系统测试是为验证和确认系统是否达到其原始目标，而对集成的硬件和软件系统进行的测试。系统测试是在真实或模拟系统运行的环境下，检查完整的程序系统能否与硬件、外设、网络和系统软件、支持平台等正确匹配、连接，并满足用户需求。")]),t._v(" "),s("li",[t._v("5.验收测试\n验收测试是按照项目任务书或合同、供需双方约定的验收依据文档对整个系统进行的测试与评审，决定产品被接收或拒收。")])]),t._v(" "),s("h3",{attrs:{id:"按照测试环境分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照测试环境分类"}},[t._v("#")]),t._v(" 按照测试环境分类")]),t._v(" "),s("ul",[s("li",[t._v("1.α测试：\n是由一个用户在开发环境下进行的测试，也可以是开发机构内部的用户在模拟实际操作环境下进行的测试。")]),t._v(" "),s("li",[t._v("2.β测试：\n是在软件的一个或多个用户的实际使用环境下进行的测试。")])]),t._v(" "),s("h3",{attrs:{id:"按照测试技术分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照测试技术分类"}},[t._v("#")]),t._v(" 按照测试技术分类")]),t._v(" "),s("ul",[s("li",[t._v("1.白盒测试\n白盒测试通过对程序内部结构的分析、检测来寻找问题。它将测试对象看成一个透明盒子，即清楚了解程序结构和处理过程，以此检查软件内部动作是否按照设计说明的规定正常进行。")]),t._v(" "),s("li",[t._v("2.黑盒测试\n黑盒测试通过软件的外部表现来发现其缺陷和错误。它把测试对象看成一个黑盒子，完全不考虑程序内部结构和处理过程。黑盒测试是在程序界面处进行测试，它只是检查程序是否按照规格说明书的规定正常运行。")]),t._v(" "),s("li",[t._v("3.灰盒测试\n灰盒测试是介于白盒测试与黑盒测试之间的测试。灰盒测试关注输出对于输入的正确性，同时也关注内部表现，但这种内部关注不像白盒测试那样详细、完整，只是通过一些表征性的现象、事件、标志来判断内部的运行状态。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[390],{1274:function(t,e,a){"use strict";a.r(e);var s=a(17),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"谈谈你对ajax的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对ajax的理解"}},[t._v("#")]),t._v(" 谈谈你对ajax的理解")]),t._v(" "),a("ul",[a("li",[t._v("ajax是一种异步通信的方法，跑直接由js脚本向服务器发起http通信，然后根据服务器返回的数据，更新网页的相应部分，而不用刷新整个页面的一种方法。")])]),t._v(" "),a("blockquote",[a("p",[t._v("创建一个ajax的步骤：")])]),t._v(" "),a("ul",[a("li",[t._v("首先是创建一个XMLHttpRequest对象。然后在这个对象上使用open方法创建一个 http请求， open方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。")]),t._v(" "),a("li",[t._v("在发起请求前，我们可以为这个对象添加一些信息和监听函数。比如说我们可以通过setRequestHeader方法来为请求添加头信息。我们还可以为这个对象添加一个状态监听函数。")]),t._v(" "),a("li",[t._v("一个XMLHttpRequest对象一共有5个状态，当它的状态变化时会触发 onreadystatechange事件，我们可以通过设置监听函数，来处理请求成功后的结果。当对象的readyState变为4的时候，代表服务器返回的数据接收完成，这个时候我们可以通过判断请求的状态，如果状态是2xx或者304的话则代表返回正常。")]),t._v(" "),a("li",[t._v("这个时候我们就可以通过response中的数据来对页面进行更新了。当对象的属性和监听函数设置完成后，最后我们调用send方法来向服务器发起请求，可以传入参数作为发送的数据体")])])])}),[],!1,null,null,null);e.default=n.exports}}]);